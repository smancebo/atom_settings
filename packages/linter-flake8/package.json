{
  "_args": [
    [
      {
        "raw": "/private/var/folders/tb/t80h6lm53jn_kxnb2srfvr4r0000gn/T/d-116912-19445-9uippg/package.tgz",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "/private/var/folders/tb/t80h6lm53jn_kxnb2srfvr4r0000gn/T/d-116912-19445-9uippg/package.tgz",
        "spec": "/private/var/folders/tb/t80h6lm53jn_kxnb2srfvr4r0000gn/T/d-116912-19445-9uippg/package.tgz",
        "type": "local"
      },
      "/private/var/folders/tb/t80h6lm53jn_kxnb2srfvr4r0000gn/T/apm-install-dir-116912-19445-1727l0i"
    ]
  ],
  "_from": "../d-116912-19445-9uippg/package.tgz",
  "_id": "linter-flake8@1.13.4",
  "_inCache": true,
  "_installable": true,
  "_location": "/linter-flake8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "/private/var/folders/tb/t80h6lm53jn_kxnb2srfvr4r0000gn/T/d-116912-19445-9uippg/package.tgz",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "/private/var/folders/tb/t80h6lm53jn_kxnb2srfvr4r0000gn/T/d-116912-19445-9uippg/package.tgz",
    "spec": "/private/var/folders/tb/t80h6lm53jn_kxnb2srfvr4r0000gn/T/d-116912-19445-9uippg/package.tgz",
    "type": "local"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "file:../d-116912-19445-9uippg/package.tgz",
  "_shasum": "d2cfe8c247c85d45eb6c0607f157e091fc2a594d",
  "_shrinkwrap": null,
  "_spec": "/private/var/folders/tb/t80h6lm53jn_kxnb2srfvr4r0000gn/T/d-116912-19445-9uippg/package.tgz",
  "_where": "/private/var/folders/tb/t80h6lm53jn_kxnb2srfvr4r0000gn/T/apm-install-dir-116912-19445-1727l0i",
  "bugs": {
    "url": "https://github.com/AtomLinter/linter-flake8/issues"
  },
  "dependencies": {
    "atom-linter": "^8.0.0",
    "atom-package-deps": "^4.0.1",
    "fs-plus": "^2.8.1"
  },
  "description": "Atom linter plugin for Python, using flake8",
  "devDependencies": {
    "coffeelint": "^1.15.0",
    "eslint": "^3.4.0",
    "eslint-config-airbnb-base": "^6.0.0",
    "eslint-plugin-import": "^1.14.0"
  },
  "eslintConfig": {
    "rules": {
      "comma-dangle": "off",
      "global-require": "off",
      "import/no-unresolved": [
        "off",
        {
          "ignore": [
            "atom"
          ]
        }
      ]
    },
    "extends": "airbnb-base",
    "globals": {
      "atom": true
    },
    "env": {
      "es6": true,
      "node": true
    }
  },
  "homepage": "https://github.com/AtomLinter/linter-flake8#readme",
  "license": "MIT",
  "main": "./lib/main",
  "name": "linter-flake8",
  "optionalDependencies": {},
  "package-deps": [
    "linter"
  ],
  "providedServices": {
    "linter": {
      "versions": {
        "1.0.0": "provideLinter"
      }
    }
  },
  "readme": "# linter-flake8\n\n[![Build Status](https://travis-ci.org/AtomLinter/linter-flake8.svg)](https://travis-ci.org/AtomLinter/linter-flake8)\n\nlinter-flake8 is a [flake8](https://pypi.python.org/pypi/flake8) provider for\n[linter](https://github.com/atom-community/linter).\n\n![img](https://cloud.githubusercontent.com/assets/4278113/8768482/52f975c6-2e3f-11e5-87e4-27c8359fd36c.gif)\n\n## Installation\n\nTo use this plugin `flake8` will need to be installed on your\nsystem. If it is not already installed, you can install\n[flake8](https://pypi.python.org/pypi/flake8) by typing the following in a\nterminal:\n\n```ShellSession\npip install flake8\n```\n\nYou can then install this package from with Atom or by typing:\n\n```ShellSession\n$ apm install linter-flake8\n```\n\n_Note: If the `linter` package is not currently installed, it will be installed\nfor you._\n\n### Built-in docstrings check (Optional)\n\nTo include built-in docstrings (pep257) support you will also need to install:\n\n```ShellSession\npip install flake8-docstrings\n```\n\n### OpenStack Style Guidelines check (Optional)\n\nTo support\n[OpenStack Style Guidelines](http://google.github.io/styleguide/pyguide.html),\nyou will also need to install the\n[hacking](https://github.com/openstack-dev/hacking) module:\n\n```ShellSession\npip install hacking\n```\n\n### Virtualenv\n\nTo ensure `flake8` targets the proper Python version for each project you work\non, it is highly recommended to install `flake8` in each project's\n[virtualenv](https://virtualenv.pypa.io/en/latest/):\n\n*   If you are okay with installing `flake8` inside each virtualenv, just do\n    that.\n\n*   If you'd rather use the system-wide `flake8` versions (e.g. `flake8` and\n    `flake8-python2`), create a `flake8` symlink in each virtualenv pointing to\n    your desired flake8 version. For example: `ln -s /usr/bin/flake8-python2\n    ~/.virtualenvs/random_python2_project/bin/flake8`\n\nThen [activate your virtualenv](https://virtualenv.pypa.io/en/latest/userguide.html#activate-script)\nfrom the command line before starting Atom, and you're good to go!\n\n## Settings\n\nYou can configure linter-flake8 like any [Atom](https://atom.io/) package by\nediting the settings in _Atom -> Preferences -> Packages -> linter-flake8_.\n\n![image](https://cloud.githubusercontent.com/assets/427137/10375451/758567d2-6dad-11e5-9b5e-3e820f4c3d57.png)\n\nOr if you prefer you can use Atom _config.cson_ file _~/.atom/config.cson_\n(click _Open Your Config_ in _Atom_ menu).\n\nIf you installed `flake8` in a location not in your `$PATH`, the Settings panel\nwill let you specify where it lives. For example:\n\n```cson\n'linter-flake8':\n  'executablePath': '/usr/bin/flake8'\n```\n\nThe `executablePath` setting may use `$PROJECT` and `$PROJECT_NAME` for the path or name of the current project, respectively.\n\n\n\n### Project configuration files\n\nLinter also supports reading `flake8` configuration files. To use them, you\nneed specify their names manually into _Config Files Names_ in the package\nsettings. Note that package settings from Settings panel will be **ignored** if\na configuration file was found.\n\n![img](https://cloud.githubusercontent.com/assets/4278113/8768510/0d3769f2-2e40-11e5-8e27-d31991973246.png)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/AtomLinter/linter-flake8.git"
  },
  "scripts": {
    "lint": "coffeelint lib && eslint spec",
    "test": "apm test"
  },
  "version": "1.13.4"
}
