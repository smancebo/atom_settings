{
  "_args": [
    [
      {
        "raw": "sb-promisify@https://registry.npmjs.org/sb-promisify/-/sb-promisify-2.0.2.tgz",
        "scope": null,
        "escapedName": "sb-promisify",
        "name": "sb-promisify",
        "rawSpec": "https://registry.npmjs.org/sb-promisify/-/sb-promisify-2.0.2.tgz",
        "spec": "https://registry.npmjs.org/sb-promisify/-/sb-promisify-2.0.2.tgz",
        "type": "remote"
      },
      "/private/var/folders/tb/t80h6lm53jn_kxnb2srfvr4r0000gn/T/apm-install-dir-117710-40923-1dmceqo.wy0tn5qaor/node_modules/atom-typescript"
    ]
  ],
  "_from": "sb-promisify@>=2.0.1 <3.0.0",
  "_id": "sb-promisify@2.0.2",
  "_inCache": true,
  "_location": "/atom-typescript/sb-promisify",
  "_phantomChildren": {},
  "_requested": {
    "raw": "sb-promisify@https://registry.npmjs.org/sb-promisify/-/sb-promisify-2.0.2.tgz",
    "scope": null,
    "escapedName": "sb-promisify",
    "name": "sb-promisify",
    "rawSpec": "https://registry.npmjs.org/sb-promisify/-/sb-promisify-2.0.2.tgz",
    "spec": "https://registry.npmjs.org/sb-promisify/-/sb-promisify-2.0.2.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/atom-typescript",
    "/atom-typescript/sb-fs",
    "/atom-typescript/sb-npm-path"
  ],
  "_resolved": "https://registry.npmjs.org/sb-promisify/-/sb-promisify-2.0.2.tgz",
  "_shasum": "4277a54754488aa9675d886e354db894c9bdc981",
  "_shrinkwrap": null,
  "_spec": "sb-promisify@https://registry.npmjs.org/sb-promisify/-/sb-promisify-2.0.2.tgz",
  "_where": "/private/var/folders/tb/t80h6lm53jn_kxnb2srfvr4r0000gn/T/apm-install-dir-117710-40923-1dmceqo.wy0tn5qaor/node_modules/atom-typescript",
  "author": {
    "name": "steelbrain"
  },
  "bugs": {
    "url": "https://github.com/steelbrain/promisify/issues"
  },
  "dependencies": {},
  "description": "Node module for simple promisification",
  "devDependencies": {
    "babel-cli": "^6.14.0",
    "babel-preset-steelbrain": "^4.0.2",
    "eslint-config-steelbrain": "^1.0.4",
    "flow-bin": "^0.32.0",
    "jasmine-fix": "^1.0.1"
  },
  "homepage": "https://github.com/steelbrain/promisify#readme",
  "keywords": [
    "promisify",
    "es6",
    "promise"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "name": "sb-promisify",
  "optionalDependencies": {},
  "readme": "# Promisify\n\nA node module to help you convert callback-style functions to promises\n\n## Installation\n\n```js\nnpm install --save sb-promisify\n```\n\n## API\n\n```js\nfunction promisifyAll(object, throwError = true): Object\nfunction promisify(callback, throwError = true): Function\n\nexport default promisify\nexport { promisify, promisifyAll }\n```\n\n## Example Usage\n\n```js\nimport fs from 'fs'\nimport promisify from 'sb-promisify'\n\nconst readFile = promisify(fs.readFile)\n\nreadFile('/etc/passwd', 'utf8').then(function(contents) {\n  console.log(contents)\n}, function() {\n  console.error('Unable to read file')\n})\n```\n```js\nimport fs from 'fs'\nimport { promisifyAll } from 'sb-promisify'\n\nconst promisedFS = promisifyAll(fs)\n\npromisedFS.readFileAsync('/etc/passwd', 'utf8').then(function(contents) {\n  console.log(contents)\n})\npromisedFS.readFile('/etc/passwd', 'utf8', function(contents) {\n  console.log(contents)\n})\n```\n\nIf you set throwError to false, here's how it would react\n\n```js\n'use babel'\n\nimport fs from 'fs'\nimport promisify from 'sb-promisify'\n\nconst access = promisify(fs.access, false)\nconst readFile = promisify(fs.readFile, false)\n\nreadFile('/etc/passwd').then(function(contents) {\n  if (contents === false) {\n    console.error('Unable to read file')\n  } else {\n    console.log(contents.toString('utf8'))\n  }\n})\n\naccess('/etc/passwd').then(function(access) {\n  console.log('access', access) // true or false\n})\n```\n\n## License\nThis module is licensed under the terms of MIT License. Check the LICENSE file for more info.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/steelbrain/promisify.git"
  },
  "scripts": {
    "build": "npm run clean; babel src --out-dir lib",
    "clean": "rm -rf lib",
    "test": "(apm test) && (flow check) && (eslint . )",
    "watch": "npm run clean; babel src --out-dir lib --watch"
  },
  "version": "2.0.2"
}
