{
  "_args": [
    [
      {
        "raw": "property-accessors@https://registry.npmjs.org/property-accessors/-/property-accessors-1.1.3.tgz",
        "scope": null,
        "escapedName": "property-accessors",
        "name": "property-accessors",
        "rawSpec": "https://registry.npmjs.org/property-accessors/-/property-accessors-1.1.3.tgz",
        "spec": "https://registry.npmjs.org/property-accessors/-/property-accessors-1.1.3.tgz",
        "type": "remote"
      },
      "/private/var/folders/tb/t80h6lm53jn_kxnb2srfvr4r0000gn/T/apm-install-dir-117710-40923-1dmceqo.wy0tn5qaor/node_modules/atom-typescript"
    ]
  ],
  "_from": "property-accessors@>=1.1.0 <2.0.0",
  "_id": "property-accessors@1.1.3",
  "_inCache": true,
  "_location": "/atom-typescript/property-accessors",
  "_phantomChildren": {},
  "_requested": {
    "raw": "property-accessors@https://registry.npmjs.org/property-accessors/-/property-accessors-1.1.3.tgz",
    "scope": null,
    "escapedName": "property-accessors",
    "name": "property-accessors",
    "rawSpec": "https://registry.npmjs.org/property-accessors/-/property-accessors-1.1.3.tgz",
    "spec": "https://registry.npmjs.org/property-accessors/-/property-accessors-1.1.3.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/atom-typescript",
    "/atom-typescript/emissary"
  ],
  "_resolved": "https://registry.npmjs.org/property-accessors/-/property-accessors-1.1.3.tgz",
  "_shasum": "1dde84024631865909ef30703365680c5f928b15",
  "_shrinkwrap": null,
  "_spec": "property-accessors@https://registry.npmjs.org/property-accessors/-/property-accessors-1.1.3.tgz",
  "_where": "/private/var/folders/tb/t80h6lm53jn_kxnb2srfvr4r0000gn/T/apm-install-dir-117710-40923-1dmceqo.wy0tn5qaor/node_modules/atom-typescript",
  "author": {
    "name": "Nathan Sobo"
  },
  "bugs": {
    "url": "https://github.com/atom/property-accessors/issues"
  },
  "dependencies": {
    "es6-weak-map": "^0.1.2",
    "mixto": "1.x"
  },
  "description": "A mixin for declaring property accessors",
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-cli": "~0.1.8",
    "grunt-coffeelint": "0.0.6",
    "grunt-contrib-coffee": "~0.7.0",
    "grunt-shell": "~0.2.2",
    "jasmine-focused": "1.x",
    "rimraf": "~2.2.2"
  },
  "homepage": "http://atom.github.io/property-accessors/",
  "keywords": [
    "property",
    "accessors",
    "metaprogramming"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/atom/telepath/raw/master/LICENSE.md"
    }
  ],
  "main": "lib/property-accessors",
  "name": "property-accessors",
  "optionalDependencies": {},
  "readme": "# Property Accessors Mixin [![Build Status](https://travis-ci.org/atom/property-accessors.svg?branch=master)](https://travis-ci.org/atom/property-accessors)\n\nA mixin for defining dynamic properties.\n\n## Basic Usage\n\nTo define a basic property accessor, use the `accessor` declaration. If you've\nincluded the mixin into a class, you define a prototype property by calling\n`@::accessor` on its prototype.\n\n```coffee\nPropertyAccessors = require 'property-accessors'\n\nclass Vehicle\n  PropertyAccessors.includeInto(this)\n\n  @::accessor 'type',\n    get: ->\n      switch @doorCount\n        when 4 then 'sedan' # i know this isn't strictly accurate\n        when 2 then 'coupe'\n    set: (type) ->\n      switch type\n        when 'sedan' then @doorCount = 4\n        when 'coupe' then @doorCount = 2\n\ncar = new Vehicle\ncar.doorCount = 2\ncar.type # => 'coupe'\n```\n\nYou can define a class-level property by *extending* with the mixin rather than\nincluding it (which extends the prototype).\n\n```coffee\nclass Vehicle\n  PropertyAccessors.extend(this)\n\n  @accessor 'vehicleCount', get: -> @allVehicles.length  \n```\n\nYou can just pass a single function if you only want to define a getter:\n\n```coffee\nclass Vehicle\n  PropertyAccessors.includeInto(this)\n\n  @::accessor 'type', -> # ...\n```\n\n## Fancy Usage\n\n### Lazy Accessors\n\nLazy accessors call a function the first time a property is accessed. You are\nstill free to overwrite this value by assigning the property explicitly.\n\n```coffee\nclass ScienceLab\n  PropertyAccessors.includeInto(this)\n\n  @::lazyAccessor 'crazyComputation', -> computeCrazyComputation()\n```\n\n### Advised Accessors\n\nAdvised accessors allow you to call code before the reading or writing of a\nproperty value. If a property is being assigned, your advice function is called\nwith the value being assigned and the old value.\n\n```coffee\nclass SpyStation\n  @advisedAccessor 'online',\n    get: -> @ensureAllSystemsNominal()\n    set: -> @ensureUserIsSpy()\n\nstation = new SpyStation\nstation.online = true # ensures user is a spy, then assigns true\nstation.online # ensures all systems are nominal, then returns true\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/atom/property-accessors.git"
  },
  "scripts": {
    "publish": "grunt",
    "test": "grunt test"
  },
  "version": "1.1.3"
}
