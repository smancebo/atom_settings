{
  "_args": [
    [
      {
        "raw": "d@https://registry.npmjs.org/d/-/d-1.0.0.tgz",
        "scope": null,
        "escapedName": "d",
        "name": "d",
        "rawSpec": "https://registry.npmjs.org/d/-/d-1.0.0.tgz",
        "spec": "https://registry.npmjs.org/d/-/d-1.0.0.tgz",
        "type": "remote"
      },
      "/private/var/folders/tb/t80h6lm53jn_kxnb2srfvr4r0000gn/T/apm-install-dir-117710-40923-1dmceqo.wy0tn5qaor/node_modules/atom-typescript"
    ]
  ],
  "_from": "d@>=1.0.0 <2.0.0",
  "_id": "d@1.0.0",
  "_inCache": true,
  "_location": "/atom-typescript/es5-ext/d",
  "_phantomChildren": {},
  "_requested": {
    "raw": "d@https://registry.npmjs.org/d/-/d-1.0.0.tgz",
    "scope": null,
    "escapedName": "d",
    "name": "d",
    "rawSpec": "https://registry.npmjs.org/d/-/d-1.0.0.tgz",
    "spec": "https://registry.npmjs.org/d/-/d-1.0.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/atom-typescript/es5-ext",
    "/atom-typescript/es5-ext/es6-iterator",
    "/atom-typescript/es5-ext/es6-symbol"
  ],
  "_resolved": "https://registry.npmjs.org/d/-/d-1.0.0.tgz",
  "_shasum": "754bb5bfe55451da69a58b94d45f4c5b0462d58f",
  "_shrinkwrap": null,
  "_spec": "d@https://registry.npmjs.org/d/-/d-1.0.0.tgz",
  "_where": "/private/var/folders/tb/t80h6lm53jn_kxnb2srfvr4r0000gn/T/apm-install-dir-117710-40923-1dmceqo.wy0tn5qaor/node_modules/atom-typescript",
  "author": {
    "name": "Mariusz Nowak",
    "email": "medyk@medikoo.com",
    "url": "http://www.medikoo.com/"
  },
  "bugs": {
    "url": "https://github.com/medikoo/d/issues"
  },
  "dependencies": {
    "es5-ext": "^0.10.9"
  },
  "description": "Property descriptor factory",
  "devDependencies": {
    "tad": "^0.2.4",
    "xlint": "^0.2.2",
    "xlint-jslint-medikoo": "^0.1.4"
  },
  "homepage": "https://github.com/medikoo/d#readme",
  "keywords": [
    "descriptor",
    "es",
    "ecmascript",
    "ecma",
    "property",
    "descriptors",
    "meta",
    "properties"
  ],
  "license": "MIT",
  "name": "d",
  "optionalDependencies": {},
  "readme": "# D\n## Property descriptor factory\n\n_Originally derived from [es5-ext](https://github.com/medikoo/es5-ext) package._\n\nDefining properties with descriptors is very verbose:\n\n```javascript\nvar Account = function () {};\nObject.defineProperties(Account.prototype, {\n  deposit: { value: function () {\n      /* ... */\n    }, configurable: true, enumerable: false, writable: true },\n  withdraw: { value: function () {\n      /* ... */\n    }, configurable: true, enumerable: false, writable: true },\n  balance: { get: function () {\n      /* ... */\n    }, configurable: true, enumerable: false }\n});\n```\n\nD cuts that to:\n\n```javascript\nvar d = require('d');\n\nvar Account = function () {};\nObject.defineProperties(Account.prototype, {\n  deposit: d(function () {\n    /* ... */\n  }),\n  withdraw: d(function () {\n    /* ... */\n  }),\n  balance: d.gs(function () {\n    /* ... */\n  })\n});\n```\n\nBy default, created descriptor follow characteristics of native ES5 properties, and defines values as:\n\n```javascript\n{ configurable: true, enumerable: false, writable: true }\n```\n\nYou can overwrite it by preceding _value_ argument with instruction:\n```javascript\nd('c', value); // { configurable: true, enumerable: false, writable: false }\nd('ce', value); // { configurable: true, enumerable: true, writable: false }\nd('e', value); // { configurable: false, enumerable: true, writable: false }\n\n// Same way for get/set:\nd.gs('e', value); // { configurable: false, enumerable: true }\n```\n\n### Installation\n\n\t$ npm install d\n\t\nTo port it to Browser or any other (non CJS) environment, use your favorite CJS bundler. No favorite yet? Try: [Browserify](http://browserify.org/), [Webmake](https://github.com/medikoo/modules-webmake) or [Webpack](http://webpack.github.io/)\n\n### Other utilities\n\n#### autoBind(obj, props) _(d/auto-bind)_\n\nDefine methods which will be automatically bound to its instances\n\n```javascript\nvar d = require('d');\nvar autoBind = require('d/auto-bind');\n\nvar Foo = function () { this._count = 0; };\nObject.defineProperties(Foo.prototype, autoBind({\n  increment: d(function () { ++this._count; });\n}));\n\nvar foo = new Foo();\n\n// Increment foo counter on each domEl click\ndomEl.addEventListener('click', foo.increment, false);\n```\n\n#### lazy(obj, props) _(d/lazy)_\n\nDefine lazy properties, which will be resolved on first access\n\n```javascript\nvar d = require('d');\nvar lazy = require('d/lazy');\n\nvar Foo = function () {};\nObject.defineProperties(Foo.prototype, lazy({\n  items: d(function () { return []; })\n}));\n\nvar foo = new Foo();\nfoo.items.push(1, 2); // foo.items array created and defined directly on foo\n```\n\n## Tests [![Build Status](https://travis-ci.org/medikoo/d.png)](https://travis-ci.org/medikoo/d)\n\n\t$ npm test\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/medikoo/d.git"
  },
  "scripts": {
    "lint": "node node_modules/xlint/bin/xlint --linter=node_modules/xlint-jslint-medikoo/index.js --no-cache --no-stream",
    "lint-console": "node node_modules/xlint/bin/xlint --linter=node_modules/xlint-jslint-medikoo/index.js --watch",
    "test": "node node_modules/tad/bin/tad"
  },
  "version": "1.0.0"
}
