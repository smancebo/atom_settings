import * as cson from "cson"
import * as fs from "fs"
import * as path from "path"

const popsicle = require("popsicle")
const plist = require("plist")

const prefix = `
# This file is generated by "scripts/grammar.ts"
# Last generated: ${ new Date().toUTCString() }

`

const grammars = {
  ts: "https://raw.githubusercontent.com/Microsoft/TypeScript-TmLanguage/master/TypeScript.tmLanguage",
  tsx: "https://raw.githubusercontent.com/Microsoft/TypeScript-TmLanguage/master/TypeScriptReact.tmLanguage"
}

for (const kind in grammars) {
  fetchBody(grammars[kind])
    .then(parsePlist)
    .then(updateGrammar)
    .then(csonStringify)
    .then(writeGrammar(kind))
    .catch(fail)
}

function updateGrammar(grammar) {
  grammar.repository.statements.patterns.unshift(...atomStatements)
  grammar.repository.expression.patterns.unshift(...atomExpressions)
  return grammar
}

function fetchBody(url: string) {
  return popsicle.default(url).then(result => result.body)
}

function parsePlist(body: string) {
  return plist.parse(body)
}

function csonStringify(data) {
  return cson.stringify(data, null, "  ")
}

function writeGrammar(name: string) {
  const grammar = path.resolve(__dirname, "../grammars/" + name + ".cson")
  return (data) => fs.writeFileSync(grammar, prefix + data)
}

function fail(error) {
  console.error(error.stack)
  process.exit(1)
}

const atomStatements = [
  {
    comment: 'Match full triple slash reference comments',
    match: '(\\/\\/\\/\\s*<reference\\s*path\\s*=)(.*?)(\\s*\\/>)',
    captures: {
      '1': {
        name: 'keyword.other.ts'
      },
      '2': {
        name: 'reference.path.string.quoted'
      },
      '3': {
        name: 'keyword.other.ts'
      }
    }
  },
  {
    comment: 'Match <amd-dependency',
    match: '(\\/\\/\\/\\s*<amd-dependency\\s*path\\s*=)(.*)(\\/>)',
    captures: {
      '1': {
        name: 'keyword.other.ts'
      },
      '2': {
        name: 'amd.path.string.quoted'
      },
      '3': {
        name: 'keyword.other.ts'
      }
    }
  },
  {
    comment: 'Match <amd-module',
    match: '(\\/\\/\\/\\s*<amd-module\\s*name\\s*=)(.*)(\\/>)',
    captures: {
      '1': {
        name: 'keyword.other.ts'
      },
      '2': {
        name: 'amd.path.string.quoted'
      },
      '3': {
        name: 'keyword.other.ts'
      }
    }
  }
]

const atomExpressions = [
  {
    comment: 'Match Angular 2 Component html templates',
    begin: '(?:(?<=^|\\stemplate:)|(?<=/\\*\\* @html \\*/))\\s*(`)',
    beginCaptures: {
      '1': { name: 'name: string.template.ts' }
    },
    end: '(?<!\\\\)`',
    endCaptures: {
      '0': { name: 'name: string.template.ts' }
    },
    patterns: [ { include: 'text.html.basic' } ]
  }
]
